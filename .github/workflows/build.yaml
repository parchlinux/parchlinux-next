name: Build ISO
on:
  push:
    tags:
      - '*'
jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged
    outputs:
      hash: ${{ steps.hash.outputs.hash }}
      iso: ${{ github.workspace }}/out/*.iso
    steps:
      - uses: actions/checkout@v2
      - name: Install Packages via Pacman
        run: pacman -Syu archiso reflector rsync curl --noconfirm
      - name: Change Arch docker mirror
        run: reflector --verbose --country 'United States' -l 5 --sort rate --save /etc/pacman.d/mirrorlist
      - name: Build image
        run: mkarchiso -v iso/
      - name: generate hash
        id: hash
        run: echo "hash=$(sha256sum ${{ github.workspace }}/out/*.iso | cut -d ' ' -f1)" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: iso
          path: ${{ github.workspace }}/out/*.iso
  create-release:
    needs: ['build']
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download ISO artifact
        uses: actions/download-artifact@v2
        with:
          name: iso
      - name: Extract ISO file name
        id: iso_name
        run: echo "::set-output name=name::$(basename ${{ github.workspace }}/out/*.iso)"
      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload ISO
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/out/*.iso
          asset_name: ${{ steps.iso_name.outputs.name }}
          asset_content_type: application/octet-stream
          asset_label: ${{ steps.iso_name.outputs.name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Add release notes and hash
        run: |
          release_notes="$(git tag -l ${{ github.ref }} --format='(%contents)')"
          release_notes+="\n\n| Name | SHA256 |\n| ---- | ------ |\n| ${{ steps.iso_name.outputs.name }} | ${{ steps.hash.outputs.hash }} |"
          hub release edit ${{ github.ref }} -m "$release_notes"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
